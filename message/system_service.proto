syntax = "proto3";

package message;

import "google/api/annotations.proto";

option go_package = "api/client/message;climsg";

// System service
service SystemService {
  rpc Heartbeat (CSHeartbeat) returns (SCHeartbeat){
    option (google.api.http) = {
      post: "/system/heartbeat"
      body: "*"
    };
  };
}

// Handshake request
message CSHandshake {
  bytes pub = 1; // Client ECDH public key
  bytes sign = 2; // Client ECDH public key signature
  string token = 3; // Token received from account/v1/login
  int64 server_id = 4; // Server ID
  int64 timestamp = 5; // Timestamp
  int32 cert_version = 6; // Signature version
}

// Handshake response
message SCHandshake {
  bytes pub = 1; // Server ECDH public key
  bytes sign = 2; // Server ECDH public key signature
  int64 timestamp = 3; // Timestamp
  int32 cert_version = 4; // Signature version
  int32 start_index = 5; // The index number of the next message to send
}

// Heartbeat request
message CSHeartbeat {
  int64 client_time = 1; // Client timestamp, accurate to seconds. Valid if the difference with server time is less than 10s
}

// Heartbeat response
message SCHeartbeat {
  int64 server_time = 1; // Server timestamp, accurate to seconds
  Code code = 2;

  enum Code {
    ErrServer = 0; // Please try again later
    Succeeded = 1; // Succeeded
    ErrTime = 2; // Timestamp error
  }
}

// Server unexpected error. Returned when the server reports an error after the request protocol and the error is unexpected
message SCServerUnexpectedErr {
  int32 mod = 1;
  int32 seq = 2;
  string msg = 3;
}

// Server triggers user logout
message SCServerLogout {
  Code code = 1;

  enum Code {
    Server = 0; // Unknown reason
    Waiting = 1; // Please try again later
    Unauthorized = 2; // Unauthorized
    ConflictingLogin = 3; // The same user is logged in on another device
    AdminKickOut = 4; // Kicked out by admin
    Banned = 5; // Account banned
  }
}
